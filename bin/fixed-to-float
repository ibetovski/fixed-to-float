#! /usr/bin/env node

var fs = require('fs');
var prompt = require('prompt');
var colors = require('colors');
var Logme = require('logme').Logme;
var logme = new Logme({
  theme: 'socket.io'
});

// put here the screen dimensions.
var device = {
  width: null,
  height: null
};

if (process.argv.length <= 3) {
  throw Error('Please enter source and destination files');
}

prompt.start();

var promptQuestions = {

  properties: {
    width: {
      pattern: /^[0-9]+$/,
      message: 'Just numbers please',
      description: 'Enter device width',
      default: 800,
      required: true
    },
    height: {
      pattern: /^[0-9]+$/,
      message: 'Just numbers please',
      description: 'Enter device height',
      default: 1280,
      required: true
    }
  }
};

prompt.get(promptQuestions, function(err, results) {
  if (err) {
    throw new Error(err);
    return;
  }

  device.width = results.width;
  device.height = results.height;

  init();
});

var whiteList = [
  'width',
  'left',
  'right',
  'height',
  'top',
  'bottom',
  'margin-top',
  'margin-left',
  'padding-top',
  'padding-left',
  'padding-bottom',
];


var sourceFile = process.argv[2];
var destinationFile = process.argv[3];

var functionsToConvert = {
  width: 'width',
  left: 'width',
  right: 'width',

  height: 'height',
  top: 'height',
  bottom: 'height'
};

convert = function(property, value) {
  // if the property is not in the list with functions
  //  we check if it contains X or Y names in its name
  if (typeof functionsToConvert[property] === 'undefined') {
    property = property
                .replace(/([\w-]+)left/, 'left')
                .replace(/([\w-]+)right/, 'right')
                .replace(/([\w-]+)top/, 'top')
                .replace(/([\w-]+)bottom/, 'bottom');
  }

  var deviceProperty = functionsToConvert[property];
  var deviceDimention = device[deviceProperty];
  var percent = parseFloat((value/deviceDimention * 100).toFixed(3));
  return percent;
}

function init() {
  fs.readFile(sourceFile, {encoding: "UTF8"}, function (err, data) {
    if (err) {
      throw new Error(err);
      return;
    }

    var pattern = new RegExp("[^\\-](" + whiteList.join("|").replace('-', '\\-') + ")\\s?\\:\\s?([0-9]+)px", "gi");

    // var result = data.match(/[top|left|right|bottom|width|height](\s+)\:(\s+)px/gi);
    var changedCSS = data.replace(pattern, function(match, p1, p2, p3) {


      // clear the whitespace from the properties
      var property = p1.replace(/\s/g, "");
      var value = parseInt(p2);

      // replace just the numbers to preserv the text indentation
      var converedString = match.replace(/([0-9])+px/, convert(property, value) + '%');
      logme.info(match.red, '\t->\t', converedString.green);
      return converedString;
    });

    fs.writeFile(destinationFile, changedCSS, function (err) {
     if (err) throw err;
     logme.info('Done!'.green);
     logme.info(destinationFile + ' was created'.yellow);
   });

  });
}